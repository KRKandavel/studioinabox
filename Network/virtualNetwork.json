{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vnetName": {
            "defaultValue": "HXVNET",
            "type": "String"
        },
        "vnetCIDR": {
            "defaultValue": "10.0.0.0/16",
            "type": "String"
        },
        "publicSubnet0Name": {
            "defaultValue": "PublicSubnet0",
            "type": "String"
        },
        "publicSubnet0": {
            "defaultValue": "10.0.0.0/24",
            "type": "String"
        },
        "publicSubnet1Name": {
            "defaultValue": "PublicSubnet1",
            "type": "String"
        },
        "publicSubnet1": {
            "defaultValue": "10.0.1.0/24",
            "type": "String"
        },
        "privateSubnet0Name": {
            "defaultValue": "PrivateSubnet0",
            "type": "String"
        },
        "privateSubnet0": {
            "defaultValue": "10.0.2.0/24",
            "type": "String"
        },
        "privateSubnet0NATGW": {
            "defaultValue": "",
            "type": "String"
        },
        "privateSubnet1Name": {
            "defaultValue": "PrivateSubnet1",
            "type": "String"
        },
        "privateSubnet1": {
            "defaultValue": "10.0.3.0/24",
            "type": "String"
        },
        "privateSubnet1NATGW": {
            "defaultValue": "",
            "type": "String"
        },
        "environment": {
            "defaultValue": "dev",
            "type": "String"
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for the resources."
            }
        }
    },
    "variables": {
        "privateSubnet0natGWExists": "[if(equals(parameters('privateSubnet0NATGW'), ''), 'none', 'exists')]",
        "privateSubnet1natGWExists": "[if(equals(parameters('privateSubnet1NATGW'), ''), 'none', 'exists')]",
        "privateSubnet0natGatewayId": {
            "id": "[resourceId('Microsoft.Network/natGateways', parameters('privateSubnet0NATGW'))]"
        },
        "privateSubnet1natGatewayId": {
            "id": "[resourceId('Microsoft.Network/natGateways', parameters('privateSubnet1NATGW'))]"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-05-01",
            "name": "[parameters('vnetName')]",
            "location": "[parameters('location')]",
            "tags": {
                "Application": "[deployment().name]",
                "Network": "Public",
                "Name": "[parameters('environment')]"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetCIDR')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('publicSubnet0Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('publicSubnet0')]",
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Enabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        }
                    },
                    {
                        "name": "[parameters('publicSubnet1Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('publicSubnet1')]",
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Enabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        }
                    },
                    {
                        "name": "[parameters('privateSubnet0Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('privateSubnet0')]",
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Enabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        }
                    },
                    {
                        "name": "[parameters('privateSubnet1Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('privateSubnet1')]",
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Enabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        }
                    }
                ],
                "virtualNetworkPeerings": [],
                "enableDdosProtection": false,
                "enableVmProtection": false
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-05-01",
            "name": "[concat(parameters('vnetName'), '/', parameters('publicSubnet0Name'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            ],
            "properties": {
                "addressPrefix": "[parameters('publicSubnet0')]",
                "delegations": [],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-05-01",
            "name": "[concat(parameters('vnetName'), '/', parameters('publicSubnet1Name'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('publicSubnet0Name'))]"

            ],
            "properties": {
                "addressPrefix": "[parameters('publicSubnet1')]",
                "delegations": [],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-05-01",
            "name": "[concat(parameters('vnetName'), '/', parameters('privateSubnet0Name'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('publicSubnet1Name'))]"
            ],
            "properties": {
                "addressPrefix": "[parameters('privateSubnet0')]",
                "delegations": [],
                "natGateway": "[if(not(equals(variables('privateSubnet0natGWExists'), 'none')), variables('privateSubnet0natGatewayId'), json('null'))]",
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-05-01",
            "name": "[concat(parameters('vnetName'), '/', parameters('privateSubnet1Name'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateSubnet0Name'))]"
            ],
            "properties": {
                "addressPrefix": "[parameters('privateSubnet1')]",
                "delegations": [],
                "natGateway": "[if(not(equals(variables('privateSubnet1natGWExists'), 'none')), variables('privateSubnet1natGatewayId'), json('null'))]",
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
        }
    ],
    "outputs": {
        "greetingMessage": {
            "value": "Hello World",
            "type": "string"
        }
    }
}
